/*
 * Copyright Anatoliy Sablin tolya@sablin.xyz
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.ma1uta.matrix.client.rest.async;

import io.github.ma1uta.matrix.client.model.auth.LoginRequest;
import io.github.ma1uta.matrix.client.model.auth.LoginResponse;
import io.github.ma1uta.matrix.client.model.auth.SupportedLoginResponse;
import io.github.ma1uta.matrix.common.EmptyResponse;

import java.util.concurrent.CompletionStage;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

/**
 * A client can obtain access tokens using the /login API.
 * <br>
 * Note that this endpoint does not currently use the user-interactive authentication API.
 */
@Path("/_matrix/client/r0")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface AuthApi {

    /**
     * Gets the homeserver's supported login types to authenticate users. Clients should pick one of these and supply it as the
     * type when logging in.
     * <br>
     * <b>Rate-limited</b>: Yes.
     * <br>
     * Return: {@link SupportedLoginResponse}.
     * <p>Status code 200: The login types the homeserver supports.</p>
     * <p>Status code 429: This request was rate-limited.</p>
     *
     * @return {@link SupportedLoginResponse}
     */
    @GET
    @Path("/login")
    CompletionStage<SupportedLoginResponse> supportedLoginTypes();

    /**
     * Authenticates the user, and issues an access token they can use to authorize themself in subsequent requests.
     * <br>
     * If the client does not supply a device_id, the server must auto-generate one.
     * <br>
     * The returned access token must be associated with the device_id supplied by the client or generated by the server.
     * The server may invalidate any access token previously associated with that device.
     * <br>
     * <b>Rate-limited</b>: Yes.
     * <br>
     * Return: {@link LoginResponse}.
     * <p>Status code 200: The user has been authenticated.</p>
     * <p>Status code 400: Part of the request was invalid. For example, the login type may not be recognised.</p>
     * <p>Status code 401: The login attempt failed. For example, the password may have been incorrect.</p>
     * <p>Status code 429: This request was rate-limited.</p>
     *
     * @param loginRequest JSON body request.
     * @return {@link LoginResponse}
     */
    @POST
    @Path("/login")
    CompletionStage<LoginResponse> login(
        LoginRequest loginRequest
    );

    /**
     * Invalidates an existing access token, so that it can no longer be used for Authorization.
     * <br>
     * <b>Requires auth</b>: Yes.
     * <br>
     * The access token used in the request was successfully invalidated.
     * <br>
     * Return: {@link EmptyResponse}.
     * <p>Status code 200: The access token used in the request was succesfully invalidated.</p>
     *
     * @return {@link EmptyResponse}
     */
    @POST
    @Path("/logout")
    CompletionStage<EmptyResponse> logout();

    /**
     * Invalidates all access tokens for a user, so that they can no longer be used for Authorization. This includes the access token
     * that made this request.
     * <br>
     * This endpoint does not require UI Authorization because UI Authorization is designed to protect against attacks where the
     * someone gets hold of a single access token then takes over the account. This endpoint invalidates all access tokens for the
     * user, including the token used in the request, and therefore the attacker is unable to take over the account in this way.
     * <br>
     * <b>Requires auth</b>: Yes.
     * <br>
     * Return: {@link EmptyResponse}.
     * <p>Status code 200: The user's access tokens were succesfully invalidated.</p>
     *
     * @return {@link EmptyResponse}
     */
    @POST
    @Path("/logout/all")
    CompletionStage<EmptyResponse> logoutAll();
}
